#!/bin/bash

# Note:
# For some reason the migrations fail sometimes.
# Delaying them with "sleep" reduces the chance of this happening.
# If it persists, re-running the setup command should fix it.

###

# This script sets up a working environment from a base site repo.
# It requires an existing src/.env.example file and an existing Vagrantfile,
# which should exist already inside the directory.
# This file itself should be kept in your $PATH folder
# Which you can find by typing
# $ echo $PATH
#
# It takes two parameters: PLATFORM and INITIAL
# PLATFORM should either be "vagrant" or "docker"
# depending on which version of base the site is built on -
# or your personal preference
#
# INITIAL is an optional parameter.
# It tells the script whether to do a complete installation,
# Or just set up the environment itself.
# INITIAL should be used when installing dependencies,
# such as after first cloning a repo.
#
# It should be ran in the root directory of a repository.
# For example:
# $ git clone [repo url] [repo name]
# $ cd [repo name]
# $ setup [docker/vagrant] [initial?]
#
# Possible usage cases:
#
# $ setup docker initial
# $ setup docker
# $ setup vagrant initial
# $ setup vagrant

###

# Only run if the PLATFORM parameter was passed
if [ $1 ]
then

  echo '> Pulling changes from repository..'
  git pull

  # If the INITIAL parameter was passed
  if [ $2 ] && [ $2 = 'initial' ]
  then

    # Grab the 'config.vm.network' line from Vagrantfile
    # Store it in a new file
    grep 'ip: ' Vagrantfile > src/Vagrantfile_ip-address-line.txt

    # Copy the contents of the new file to the clipboard
    # This is probably not the 'right' way to hold this information..
    pbcopy < src/Vagrantfile_ip-address-line.txt
    IPLINE=$(pbpaste)

    # Strip the line down to just the IP address itself
    IPADDRESS=$(echo ${IPLINE#*ip: } | sed -e 's/^"//' -e 's/"$//')

    # Delete file holding the original line of text
    rm -f src/Vagrantfile_ip-address-line.txt

    # Make changes to environment constants
    # Then save in a new file (.env)
    sed -e 's/APP_SECURE=true/APP_SECURE=false/g' -e 's/APP_IN_TEST_MODE=false/APP_IN_TEST_MODE=true/g' -e 's/CACHE_DRIVER=filesystem/CACHE_DRIVER=array/g' -e '/SMTP_SERVER=maildev/s/^/# /g' -e 's/APP_HOST=example.com/APP_HOST='${IPADDRESS}'/g' src/.env.example > src/.env

    # Output changes
    echo ''
    echo '> Generating .env file..'
    echo '> Set APP_SECURE to false'
    echo '> Set APP_IN_TEST_MODE to true'
    echo '> Set CACHE_DRIVER to array'
    echo '> Commented out SMTP_SERVER=maildev'
    echo '> Set APP_HOST to' ${IPADDRESS}

    echo '> Installing Composer dependencies..'
    composer install

    echo '> Locking dependencies..'
    yarn --pure-lockfile

  fi

  # handle PLATFORM parameter
  if [ $1 = 'vagrant' ]
  then
    echo '> Preparing virtual machine..'
    vagrant up
    wait
  elif [ $1 = 'docker' ]
  then

    if [ -f 'docker-compose.dev.yml' ]
    then

      # How the migrations are performed depends on the version of Base the site uses
      # The easiest way to test this is to see if the docker-dev-migrate file exists
      if [ -f 'bin/docker-dev-migrate' ]
      then

        echo '> Launching Docker images in daemon mode..'
        bin/docker-dev-up -d
        wait

        echo '> Migrating database..'
      	bin/docker-dev-migrate

      else

        echo '> No migration file found.'
        echo '> Temporarily editing docker-compose.dev.yml file..'

        # Set the php container working directory to /opt to make migrations easier
        sed $'s/php:/php:\\\n    working_dir: \\/opt/g' docker-compose.dev.yml > docker-compose.dev.yml.new
        mv docker-compose.dev.yml.new docker-compose.dev.yml

        echo '> Launching Docker images in daemon mode..'
        bin/docker-dev-up -d
        wait

        echo '> Resetting docker-compose.dev.yml file..'

        # Remove the working_dir line from the docker-compose.dev.yml
        sed '/working_dir: \/opt/d' docker-compose.dev.yml > docker-compose.dev.yml.new
        mv docker-compose.dev.yml.new docker-compose.dev.yml

        # According to this:
        # https://unix.stackexchange.com/questions/98801/how-do-i-stop-sed-from-adding-extra-newline-characters
        # The docker-compose.dev file should end in a new line.
        # For this reason, the commands sed and mv ensure there is a new line at the end of the file,
        # but this doesn't match the file in Base and causes Github to register the change.
        # This removes the new line -
        # Effectively resetting the file to how it was before this script ran.
        # Again, there is probably a much better way to go about this.
        printf "" | dd  of='docker-compose.dev.yml' seek=275 bs=1 count=1

        echo '> Migrating database..'
        # For some reason there needs to be a delay before the migration can take place
        sleep 4
        bin/docker-dev exec php "php src/vendor/bin/phinx migrate"
        wait

      else
        echo 'Error: No docker-compose.dev.yml file detected.'
        echo 'Please use one of the following:'
        echo '$ setup vagrant initial'
        echo '$ setup vagrant'
      fi

    fi
  fi

  # Overwrite IP address from the one in Vagrantfile to the one Docker said to use
  IPADDRESS=$(docker-compose port nginx-proxy 443)

  echo '> Launching in Chrome..'
  /usr/bin/open -a '/Applications/Google Chrome.app' https://${IPADDRESS}
  echo '> Site running at URL: https://'${IPADDRESS}
  echo '> [OPTIONAL] Givin em one of these..'
  echo '> Setup complete'
  echo ''

else
  echo 'Error: No platform entered.'
  echo 'Possible usage cases:'
  echo '$ setup docker initial'
  echo '$ setup docker'
  echo '$ setup vagrant initial'
  echo '$ setup vagrant'
fi
